
NODE JS: 

	download and install node js : https://nodejs.org/en/  (npm automatically installed with nodejs)

	ctrl+shift+esc = task manager ;

	file system 
		asynchronous :: fs.writeFileSync("newFile.txt","My new file"); , fs.appendFileSync("newFile.txt","vikas"); , 
			  :  var buf_data = fs.readFileSync("newFile.txt"); console.log(buf_data.toString());   
					var str_data = fs.readFileSync("newFile.txt","utf-8"); console.log(str_data);
			  : fs.mkdirSync("vikas"), (/ .rmdirSync() / .unlinkSync());
		synchrnous : fs.readFile("newFile.txt", "UTF-8", (err,data)=> {console.log(data)}); ( a callback function should be passed );

	operating system : os.arch() , os.freemem() , 

	path : console.log(path.parse("C:/Users/vikas/OneDrive/Desktop/New folder (2)/revisited/nodejs/index.js"))  ( *use forward slash)

	export/import : index2.js -> module.exports = opr ,  index1.js-> const opr = require("./index2");


NPM : https://www.npmjs.com/package/nodemon

	init npm : npm init -y
	npm i nodemon  
			start nodemon : nodemon index.js
			terninate : ctrl+c
	
	put "type": "module", at top of package.json
	
	chalk :npm i chalk , import chalk from 'chalk'; console.log(chalk.red.inverse('Hello world!'));

	validator : var res = validator.isEmail("vikas123gmail.com");   ( / isDecimal(str) / isDivisibleBy(str, number) )
				console.log(res ? chalk.green.inverse(res) : chalk.red.inverse(res)); 

	MODULE WRAPPER : ( function (exports, require, module, __filename,__dirname ){  });

 	http module : import http from 'http';
				const server = http.createServer( (req, res) => {res.end("Hello from other side");});
				server.listen(8000, ()=>{console.log("server is running");})

	url module : import http from 'http';
				const server = http.createServer(function (req, res) {
    				if(req.url=="/"){
        				res.write("Home");
    				} else if(req.url=="/about"){
        				res.write("about us");
    				}	
    					res.end();
				  else{
     			     res.writeHead(404);
       				res.write("<h1> 404 error</h1>");
    				}
				});
				server.listen(3000, ()=>{
    					console.log("server is running");
				})
	
	JSON : javascript object notation 

		const boiData = {name: "vikas",age:20,}
		const jsonData = JSON.stringify(boiData);  {"name":"vikas","age":20}  // convert toJSON
		const objData = JSON.parse(jsonData);        					// convert back to object
		console.log(objData.name);

	writeFile : fs.writeFile("file.json", jsonData, (err) => { console.log("done"); });
	readFile  :  fs.readFile("file.json","utf-8", (err,data)=>{ console.log(data) })

	API ( application programming interface) : api allow two applications to communicate with each other, ( .json )

	events : import EventEmmiter from 'events'
			const event = new EventEmmiter();
			event.on("checkPage",(sc,msg)=>{
    				console.log(`status code is ${sc} and the page is ${msg}`);
			})
			event.emit("checkPage",200,"ok");

			(1st method)
	stream :  import fs from 'fs'; import http from 'http'; const server = http.createServer();
			server.on("request", (req,res)=>{
    				fs.readFile("file.txt","utf-8", (err,data) => {
        			res.end(data);
    				})
			})
			server.listen(3000, ()=>{
    				console.log("server is running");
			})
	
			(2nd)
		 : import fs from 'fs';
			import http from 'http';
			const server = http.createServer();
			server.on("request", (req,res)=>{
    				const rstream =fs.createReadStream("input.txt");
    				rstream.on("data",(chunkdata)=>{
        				res.write(chunkdata);
    				});
    				rstream.on("end",()=>{
        				res.end();
    				})
			})
			server.listen(3000, ()=>{
    				console.log("server is running");
			})

			(3rd)
		 : import fs from 'fs';
			import http from 'http';
			const server = http.createServer();
			server.on("request", (req,res)=>{
    				const rstream =fs.createReadStream("input.txt");
    				rstream.pipe(res);
			})
			server.listen(3000, ()=>{
    				console.log("server is running");
			})

	


